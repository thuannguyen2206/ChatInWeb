@using WebChat.Common.Utilities.Constants

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>WebChat – The Simplest Chat Platform</title>
    <meta name="description" content="#">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap core CSS -->
    <link href="/dist/css/lib/bootstrap.min.css" type="text/css" rel="stylesheet">
    <!-- Swipe core CSS -->
    <link href="/dist/css/swipe.min.css" type="text/css" rel="stylesheet">
    <!-- Favicon -->
    <link href="/dist/img/favicon.png" type="image/png" rel="icon">
    <!-- Jquery UI-->
    <link href="~/dist/css/jquery-ui.css" />
    <!-- Select2-->
    <link href="~/dist/plugin/select2/css/select2.css" rel="stylesheet" />
    <!-- Emojionearea-->
    <link href="~/dist/plugin/emoji/css/emojionearea.css" rel="stylesheet" />
    <!-- My style-->
    <link href="~/dist/css/custom/my-style.css" rel="stylesheet" />
    <link href="~/dist/css/custom/preview-group.css" rel="stylesheet" />
</head>
<body>
    <main>
        <div class="layout">
            <!-- Start of Navigation -->
            <div class="navigation">
                <div class="container">
                    <div class="inside">
                        <div class="nav nav-tab menu">
                            <partial name="_Avatar" />
                            <a style="cursor:pointer" id="nav_contact"><i class="material-icons">account_circle</i></a>
                            <a style="cursor:pointer" id="nav_discussion" class="active"><i class="material-icons active">chat_bubble_outline</i></a>
                            <a style="cursor:pointer" id="nav_notification" class="f-grow1"><i class="material-icons">notifications_none</i></a>
                            <button class="btn mode"><i class="material-icons">brightness_2</i></button>
                            <a style="cursor:pointer" id="nav_setting"><i class="material-icons">settings</i></a>
                            <a asp-action="Logout" asp-controller="User" class="btn power"><i class="material-icons">power_settings_new</i></a>
                        </div>
                    </div>
                </div>
            </div>
            <!-- End of Navigation -->

            @RenderBody()

            <!-- Start of Add Friends -->
            <div class="modal fade" id="startnewcontact" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <partial name="_NewContact" />
                </div>
            </div>
            <!-- End of Add Friends -->
            <!-- Start of Create Chat -->
            <div class="modal fade" id="startnewchat" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <partial name="_NewChat" />
                </div>
            </div>
            <!-- End of Create Chat -->
            <!-- Start of image preview modal-->
            <div class="modal fade" id="image-modal">
                <div class="modal-dialog modal-lg modal-dialog-centered" tabindex="-1" role="dialog" aria-hidden="true">
                    <div class="modal-content">
                        <div class="modal-body">
                            <a href="#" id="image-download" title="Download"><span class="material-icons">file_download</span></a>
                            <button type="button" class="close" data-dismiss="modal" title="Close"><span aria-hidden="true">&times;</span></button>
                            <img src="" class="img-fluid image-preview" alt="Image preview">
                        </div>
                    </div>
                </div>
            </div>
            <!-- End of image preview modal-->
            <!-- Start of group preview modal-->
            <div class="modal fade" id="group-modal"></div>
            <!-- End of group preview modal-->
        </div> <!-- Layout -->
    </main>
    <!-- Bootstrap/Swipe core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="~/dist/js/jquery.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.textcomplete/1.3.4/jquery.textcomplete.js" type="text/javascript"></script>
    <script src="~/dist/js/jquery-ui.js" type="text/javascript"></script>
    <script src="~/dist/plugin/emoji/js/emojionearea.js"></script>
    <script src="/dist/js/vendor/popper.min.js" type="text/javascript"></script>
    <script src="/dist/js/swipe.min.js" type="text/javascript"></script>
    <script src="/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="~/dist/js/signalr/signalr.js" type="text/javascript"></script>
    <script src="~/dist/plugin/select2/js/select2.js"></script>
    <script src="~/dist/plugin/select2/js/i18n/vi.js"></script>
    <script src="~/dist/js/custom/my-script.js" type="text/javascript"></script>
    <script src="~/dist/js/custom/new-group.js" type="text/javascript"></script>
    <script src="~/dist/js/custom/new-contact.js" type="text/javascript"></script>
    <script src="~/dist/js/custom/utils.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js" type="text/javascript"></script>
    <script>
         // initial connection
        const connection = new signalR.HubConnectionBuilder().withUrl('@SystemConstant.ChatHub').withAutomaticReconnect([0, 0, 10000]).build();
        connection.keepAliveIntervalInMilliseconds = parseInt('@SystemConstant.KeepAliveIntervalSeconds') * 1000;
        connection.serverTimeoutInMilliseconds = parseInt('@SystemConstant.ClientTimeoutIntervalSeconds') * 1000;

        connection.start().catch(function (err) {
            return console.error(err.toString());
        }).then(function () {
            connection.invoke('InitialConnection').then(function (response) {
                //console.log("Initial connection response: " + response);
            });
        });
        connection.on("SendNewMessage", function (response) {
            if (response != null && response.chatGroupId === $('.hidden-field #chatGroupId').val()) {
                utils.DeleteContentNoMessage();
                utils.SendMessageItem(response, $('.hidden-field #me').val());
            }
        });
        connection.on("SendNewFile", function (response) {
            if (response != null && response.chatGroupId === $('.hidden-field #chatGroupId').val()) {
                utils.DeleteContentNoMessage();
                utils.SendFileItem(response, $('.hidden-field #me').val());
            }
        });
        connection.on("NewDiscussion", function (response) {
            if (response != null) {
                utils.NewDiscussionItem(response);
            }
        });
        connection.on("NotificationNewContact", function (response) {
            if (response != null) {
                utils.NewContactNotiItem(response);
            }
        });
        connection.on("AcceptNewContact", function (response) {
            if (response != null) {
                utils.AcceptContactItem(response);
            }
        });
        connection.on("RemoveGroupMember", function (response) {
            if (response != null) {
                utils.RemoveGroupItem(response);
            }
        });
        connection.on("Unfriend", function (response) {
            if (response != null) {
                utils.UnfriendItem(response);
            }
        });
        connection.on("BlockFriend", function (response) {
            if (response != null) {
                utils.DeleteItemWhenBlock(response);
            }
        });
        connection.on("RemoveGroup", function (response) {
            if (response != null) {
                utils.RemoveGroupItem(response);
            }
        });

        //connection.on("UserLogout", function (response) {
        //    if (response != null) {
        //        utils.LogoutStatus(response);
        //    }
        //});
        //connection.on("UserLogin", function (response) {
        //    if (response != null) {
        //        utils.LoginStatus(response);
        //    }
        //});

    </script>

    @await Component.InvokeAsync("Notyf")
</body>
</html>
